//start with the API call
//
function makeAPICallWithDelay(apiurl) {
  var url = apiurl 
  var headers = {
    "User-Agent": "Mozilla",
    "Authorization": "Key 29b73089f8ca235177c714de2e10c92a993cf64dc6e237844c602c4b297654e65f5e2857d40bab62d2113b77e9d09a698747ba7b3cd26701429026a38d01ddaf"
  };

  var options = {
    method: "GET",
    headers: headers
  };

  var response = UrlFetchApp.fetch(url, options);
  var data = response.getContentText();
  
  // Parse the API response data
  var responseData = JSON.parse(data);
  var salesData = responseData.sales; // Access sales directly

  // Get the Sales Per Day sheet
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Orders");
  
  // Clear existing data in the sheet
  //sheet.clearContents();
  
  // Define the headers to include
  var headersToInclude = [
    "order_item_id",
    "order_id",
    "order_date",
    "sale_status",
    "offer_id",
    "tsin",
    "sku",
    "product_title",
    "takealot_url_mobi",
    "selling_price",
    "quantity",
    "dc",
    "customer",
    "shipment_id",
    "po_number",
    "shipment_name",
    "takealot_url",
    "shipment_state_id",
    "success_fee",
    "fulfillment_fee",
    "courier_collection_fee",
    "auto_ibt_fee",
    "total_fee"
  ];
  
  // Write the data to the sheet
  var values = [];
  
  for (var i = 0; i < salesData.length; i++) {
    var sale = salesData[i];
    var row = [];
    for (var j = 0; j < headersToInclude.length; j++) {
      var header = headersToInclude[j];
      var value = sale[header];
      row.push(value);
    }
    values.push(row);
  }
  
  // Insert rows after row 1 (headers) for the new data
  sheet.insertRowsAfter(1, values.length);
  
  // Set the range to start from row 2 (after headers) and match the number of rows (values.length) and maximum number of columns (headersToInclude.length)
  var numRows = values.length;
  var numColumns = headersToInclude.length;
  var range = sheet.getRange(2, 1, numRows, numColumns);
  
  // Set the values in the range
  range.setValues(values);
  //Utilities.sleep(5000);
}

// 
//we will need to create a loop that changes the api request structure 
//number of pages lets make it 10 , that will then give us the last 1000 sales 
//
function masterAPICaller() {
  //an adjust ment we can make here for historical data is to go back in time using a for loop 
  //and looping through the page number ? 
  //
  //we just need to check if we have the code to check the year ? 
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Orders");
  sheet.clearContents();
  // Define your API URLs
  var apiurl1 = "https://seller-api.takealot.com/1/sales?page_number=20&page_size=100";
  var apiurl2 = "https://seller-api.takealot.com/1/sales?page_number=19&page_size=100";
  var apiurl3 = "https://seller-api.takealot.com/1/sales?page_number=18&page_size=100";
  var apiurl4 = "https://seller-api.takealot.com/1/sales?page_number=17&page_size=100";
  var apiurl5 = "https://seller-api.takealot.com/1/sales?page_number=16&page_size=100";
  var apiurl6 = "https://seller-api.takealot.com/1/sales?page_number=15&page_size=100";
  var apiurl7 = "https://seller-api.takealot.com/1/sales?page_number=14&page_size=100";
  var apiurl8 = "https://seller-api.takealot.com/1/sales?page_number=13&page_size=100";
  var apiurl9 = "https://seller-api.takealot.com/1/sales?page_number=12&page_size=100";
  var apiurl10 = "https://seller-api.takealot.com/1/sales?page_number=11&page_size=100";
  var apiurl11 = "https://seller-api.takealot.com/1/sales?page_number=10&page_size=100";
  var apiurl12 = "https://seller-api.takealot.com/1/sales?page_number=9&page_size=100";
  var apiurl13 = "https://seller-api.takealot.com/1/sales?page_number=8&page_size=100";
  var apiurl14 = "https://seller-api.takealot.com/1/sales?page_number=7&page_size=100";
  var apiurl15 = "https://seller-api.takealot.com/1/sales?page_number=6&page_size=100";
  var apiurl16 = "https://seller-api.takealot.com/1/sales?page_number=5&page_size=100";
  var apiurl17 = "https://seller-api.takealot.com/1/sales?page_number=4&page_size=100";
  var apiurl18 = "https://seller-api.takealot.com/1/sales?page_number=3&page_size=100";
  var apiurl19 = "https://seller-api.takealot.com/1/sales?page_number=2&page_size=100";
  var apiurl20 = "https://seller-api.takealot.com/1/sales?page_number=1&page_size=100";

  // Make API calls with delay
  makeAPICallWithDelay(apiurl1);
    Utilities.sleep(5000);
  makeAPICallWithDelay(apiurl2);
    Utilities.sleep(5000);
  makeAPICallWithDelay(apiurl3);
   Utilities.sleep(5000);
  makeAPICallWithDelay(apiurl4);
    Utilities.sleep(5000);
  makeAPICallWithDelay(apiurl5);
    Utilities.sleep(5000);
  makeAPICallWithDelay(apiurl6);
    Utilities.sleep(5000);
  makeAPICallWithDelay(apiurl7);
    Utilities.sleep(5000);
  makeAPICallWithDelay(apiurl8);
    Utilities.sleep(5000);
  makeAPICallWithDelay(apiurl9);
   Utilities.sleep(5000);
  makeAPICallWithDelay(apiurl10);
    Utilities.sleep(5000);
  makeAPICallWithDelay(apiurl11);
    Utilities.sleep(5000);
  makeAPICallWithDelay(apiurl12);
    Utilities.sleep(5000);
  makeAPICallWithDelay(apiurl13);
    Utilities.sleep(5000);
  makeAPICallWithDelay(apiurl14);
    Utilities.sleep(5000);
  makeAPICallWithDelay(apiurl15);
    Utilities.sleep(5000);
  makeAPICallWithDelay(apiurl16);
    Utilities.sleep(5000);
  makeAPICallWithDelay(apiurl17);
    Utilities.sleep(5000);
  makeAPICallWithDelay(apiurl18);
    Utilities.sleep(5000);
  makeAPICallWithDelay(apiurl19);
    Utilities.sleep(5000);
  makeAPICallWithDelay(apiurl20);
}
//
// once we obtain all the histrical data from the API in the orders sheet 
//we will then check the Sales order ID exists in the sheet Sales Per Day 
//if it does not it will append the line to the top of the sheet , that way 
//we will always ensure that the latest data is at the top of the sheet 
//this will also ensure that the data is always held to ensure we have 
//accurate sales for the month 
//we will just need to manually check and ensure that the value is correct 
//
function copyToSalesPerDay() {
  var ordersSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Orders');
  var salesPerDaySheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Sales Per Day');
  
  var ordersData = ordersSheet.getDataRange().getValues();
  var salesPerDayData = salesPerDaySheet.getDataRange().getValues();
  
  // Create a Set to store unique values from 'Sales Per Day' sheet (column B)
  var salesPerDaySet = new Set(salesPerDayData.map(row => row[1]));
  
  // Create an array to store rows to be appended
  var rowsToAppend = [];
  
  // Iterate through each row in the 'Orders' sheet (starting from the second row)
  for (var i = 1; i < ordersData.length; i++) {
    var orderValue = ordersData[i][1]; // Assuming you want to compare data in column B (index 1)
    
    // Check if the value exists in 'Sales Per Day' Set
    if (!salesPerDaySet.has(orderValue)) {
      rowsToAppend.push(ordersData[i]);
    }
  }
  
  // Append all the rows in one batch to 'Sales Per Day' sheet
  if (rowsToAppend.length > 0) {
    salesPerDaySheet.getRange(salesPerDayData.length + 1, 1, rowsToAppend.length, rowsToAppend[0].length).setValues(rowsToAppend);
  }
}
//
//i want to set the code up that every 5 mins it updates the number of sales 
//going back 5 pages and 100 sales per page 
//
// we then want to copy the sales that match todays date over to the sheet called sales per day 
//then i want to tally up the  ((sales X Qty) - (Total Fee) 
//provide the net Sale , also provide the gross sale Inc VAT 
//
// function to copy the data that matches todays date over
// 
function updateMonthlySalesGross() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var completedSheet = ss.getSheetByName('Completed Sales Per Day');
  var monthlySheet = ss.getSheetByName('Monthly Sales');

  var currentDate = new Date();
  var currentMonth = currentDate.getMonth() + 1; // Months are zero-based

  var completedData = completedSheet.getDataRange().getValues();
  var monthlyData = monthlySheet.getDataRange().getValues();

  var monthlySalesMap = {}; // Store monthly sales in a map

  // Iterate through completed data to calculate monthly sales
  for (var i = 1; i < completedData.length; i++) { // Assuming the first row is headers
    var dateString = completedData[i][0]; // Assuming date is in column A
    var value = completedData[i][1]; // Assuming value is in column B
    var date = new Date(dateString);

    if (!isNaN(date.getTime())) { // Check if it's a valid date
      var month = date.getMonth() + 1;
      var year = date.getFullYear();

      if (month === currentMonth && year === currentDate.getFullYear()) {
        // Accumulate monthly sales in the map
        var monthlyKey = currentMonth + '/' + currentDate.getFullYear();
        monthlySalesMap[monthlyKey] = (monthlySalesMap[monthlyKey] || 0) + value;
      }
    }
  }

  // Update the Monthly Sales sheet
  for (var j = 1; j < monthlyData.length; j++) { // Assuming the first row is headers
    var monthlyDateString = monthlyData[j][0]; // Assuming date is in column A
    var monthlyDate = new Date(monthlyDateString);

    if (!isNaN(monthlyDate.getTime())) { // Check if it's a valid date
      var monthlySheetMonth = monthlyDate.getMonth() + 1;
      var monthlySheetYear = monthlyDate.getFullYear();
      var monthlyKey = monthlySheetMonth + '/' + monthlySheetYear;

      if (monthlySalesMap[monthlyKey]) {
        monthlySheet.getRange(j + 1, 3).setValue(monthlySalesMap[monthlyKey]);
      }
    }
  }
}
//
function updateMonthlySalesNet() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var completedSheet = ss.getSheetByName('Completed Sales Per Day');
  var monthlySheet = ss.getSheetByName('Monthly Sales');

  var currentDate = new Date();
  var currentMonth = currentDate.getMonth() + 1; // Months are zero-based

  var completedData = completedSheet.getDataRange().getValues();
  var monthlyData = monthlySheet.getDataRange().getValues();

  var monthlySalesMap = {}; // Store monthly sales in a map

  // Iterate through completed data to calculate monthly sales
  for (var i = 1; i < completedData.length; i++) { // Assuming the first row is headers
    var dateString = completedData[i][0]; // Assuming date is in column A
    var value = completedData[i][2]; // Assuming value is in column C
    var date = new Date(dateString);

    if (!isNaN(date.getTime())) { // Check if it's a valid date
      var month = date.getMonth() + 1;
      var year = date.getFullYear();

      if (month === currentMonth && year === currentDate.getFullYear()) {
        // Accumulate monthly sales in the map
        var monthlyKey = currentMonth + '/' + currentDate.getFullYear();
        monthlySalesMap[monthlyKey] = (monthlySalesMap[monthlyKey] || 0) + value;
      }
    }
  }

  // Update the Monthly Sales sheet
  for (var j = 1; j < monthlyData.length; j++) { // Assuming the first row is headers
    var monthlyDateString = monthlyData[j][0]; // Assuming date is in column A
    var monthlyDate = new Date(monthlyDateString);

    if (!isNaN(monthlyDate.getTime())) { // Check if it's a valid date
      var monthlySheetMonth = monthlyDate.getMonth() + 1;
      var monthlySheetYear = monthlyDate.getFullYear();
      var monthlyKey = monthlySheetMonth + '/' + monthlySheetYear;

      if (monthlySalesMap[monthlyKey]) {
        monthlySheet.getRange(j + 1, 4).setValue(monthlySalesMap[monthlyKey]);
      }
    }
  }
}
//
function copyMatchingRowsToSalesPerDay() {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var ordersSheet = spreadsheet.getSheetByName('Sales Per Day');
  var salesPerDaySheet = spreadsheet.getSheetByName('Completed Sales Per Day');
  var currentDate = new Date();
  var currentDay = currentDate.getDate();
  var currentMonth = currentDate.getMonth() + 1; // Months are 0-indexed

  // Clear the 'Sales Per Day' sheet starting from row 2
  salesPerDaySheet.getRange(2, 1, salesPerDaySheet.getLastRow() - 1, salesPerDaySheet.getLastColumn()).clearContent();

  var ordersData = ordersSheet.getDataRange().getValues();
  var salesPerDayData = [];

  // Loop through each row in the 'Orders' sheet
  for (var i = 0; i < ordersData.length; i++) {
    var orderDate = new Date(ordersData[i][2]); // Assuming the date is in column C (index 2)

    // Check if the date is valid
    if (!isNaN(orderDate.getTime())) {
      var orderDay = orderDate.getDate();
      var orderMonth = orderDate.getMonth() + 1; // Months are 0-indexed

      // Check if the day and month match the current date (ignoring the year and time)
      if (orderMonth === currentMonth) {
        // Log the matching row
        Logger.log("Matching Row: " + ordersData[i].join(', '));

        // Extract the values from column C, J, and K
        var columnCValue = ordersData[i][2];
        var columnJValue = ordersData[i][9];
        var columnKValue = ordersData[i][10];
        var columnVvalue = ordersData[i][19];

        // Check if the values from column J and K are valid numbers
        if (!isNaN(columnJValue) && !isNaN(columnKValue) && !isNaN(columnVvalue)) {
          // Calculate the product of column J and column K
          var productValue = ((columnJValue * columnKValue) / 1.15);
          var productValue2 = ((productValue - columnVvalue) / 1.15); // this will give you the gross sales

          // Add the matching data to the 'Sales Per Day' data array
          salesPerDayData.push([columnCValue, productValue, productValue2]);
        }
      }
    }
  }

  // If there is matching data, append it to the 'Sales Per Day' sheet starting from row 2
  if (salesPerDayData.length > 0) {
    salesPerDaySheet.getRange(salesPerDaySheet.getLastRow() + 1, 1, salesPerDayData.length, salesPerDayData[0].length).setValues(salesPerDayData);
  }
}
//
//write a function that will remove all the returns and cancellations from the sheet called 'Orders' , move the cell up 
//we will only run this function once the API call is done 
//the 3 options are : Cancelled by Takealot // Cancelled by Takealot - DC Stock Inquiry // Cancelled By Seller // Cancelled By Customer // Returned
//
function trackTop5SalesItems() {
  var sourceSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Sales Per Day');
  var data = sourceSheet.getRange('F2:F' + sourceSheet.getLastRow()).getValues(); // Assuming your data starts from row 2 in column F

  var salesItems = {};

  // Count the frequency of each item in column F
  for (var i = 0; i < data.length; i++) {
    var item = data[i][0]; // Assuming column F contains the item name
    var quantity = 1; // We count each row as a sale in this case

    if (!salesItems[item]) {
      salesItems[item] = 0;
    }

    salesItems[item] += quantity;
  }

  // Sort the sales items by frequency in descending order
  var sortedItems = Object.keys(salesItems).sort(function(a, b) {
    return salesItems[b] - salesItems[a];
  });

  // Get the destination sheet ('Dashboard')
  var destinationSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Dashboard');
  
  // Write the top 5 sales items and their frequencies to cells E18 and F18 onward
  for (var j = 0; j < 5 && j < sortedItems.length; j++) {
    var currentItem = sortedItems[j];
    var currentFrequency = salesItems[currentItem];
    
    destinationSheet.getRange('E' + (18 + j)).setValue(currentItem);
    destinationSheet.getRange('F' + (18 + j)).setValue(currentFrequency);
  }
}
//
//
function removeCancelationsAndReturuns() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Orders');
  var data = sheet.getDataRange().getValues();
  var valuesToCheck = ['Returned', 'Cancelled by Seller','Cancelled by Customer','Cancelled by Takealot','Cancelled - Inbound Exception (Short Supplied)','Cancelled by Takealot - DC Stock Inquiry','Cancelled - Late Delivery','Cancelled by Takealot - DC Stock Inquiry']; // Add your values here
  
  for (var i = data.length - 1; i >= 1; i--) { // Start from the bottom and go up
    var cellValue = data[i][3]; // Column D is 0-indexed, so it's data[i][3]
    
    if (valuesToCheck.indexOf(cellValue) !== -1) {
      sheet.deleteRow(i + 1); // Add 1 to convert from 0-index to 1-index
    }
  }
}
//
function deleteRows() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Orders"); // Change "Sheet1" to your sheet name

  if (sheet != null) {
    sheet.deleteRows(4000, 10000); // Deletes rows from 3000 to 100000 (total of 97001 rows)
  } else {
    Logger.log("Sheet not found!");
  }
}
//
function removeDuplicates() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName('Sales Per Day');
  var data = sheet.getDataRange().getValues();
  
  var seen = {};
  var deletedRows = [];
  
  for (var i = 0; i < data.length; i++) {
    var value = data[i][1]; // Assuming Column B (index 1) is being checked for duplicates
    
    if (seen[value]) {
      // If the value is already seen, mark the row for deletion
      deletedRows.push(i + 1); // Adding 1 because arrays are 0-indexed but rows are 1-indexed
    } else {
      seen[value] = true;
    }
  }
  
  // Delete rows marked for deletion in reverse order to avoid shifting rows incorrectly
  for (var j = deletedRows.length - 1; j >= 0; j--) {
    sheet.deleteRow(deletedRows[j]);
  }
}
//
//here we will write a completed master function that will run everything from the API call to extracting the data in sequence 
//
function masterUpdateFigRun(){
 //here we are going to call the functions and run them in the correct order 
 //
 //deleteRows(); //deletes empty rows to avoid script error
 //
 //
 masterAPICaller();
 Utilities.sleep(10000); // 2 min
 //
 //
 removeCancelationsAndReturuns();
 Utilities.sleep(10000); // 1 min
 //
 copyToSalesPerDay();
 Utilities.sleep(10000); // 1 min 
 //
 copyMatchingRowsToSalesPerDay(); 
 Utilities.sleep(10000); // 1 min 
 //
 removeDuplicates(); //removes all the duplicate orders
 //
 updateMonthlySalesGross(); 
 Utilities.sleep(10000); // 30 seconds
 //
 updateMonthlySalesNet(); 
 Utilities.sleep(10000); // 30 seconds
 //
 trackTop5SalesItems();
 //
}